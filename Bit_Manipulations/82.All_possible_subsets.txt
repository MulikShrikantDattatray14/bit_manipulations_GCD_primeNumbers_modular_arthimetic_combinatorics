Given an integer array nums of unique elements, return all possible 
subsets.(the power set).

The solution set must not contain duplicate subsets.Return the solution in any order.

Example 1:-
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Example 2:-
Input: nums = [0]
Output: [[],[0]]
 

Constraints:-
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

//======================================================================================================================================================================================


  function allPossibleStrings(s) {
    const n = s.length;
    const ans = []; // start with the empty array
    // 1<<n = 2 ^ n
    for (let num = 0; num < 1 << n; num++) {
      let sub = [];
      for (let i = 0; i < n; i++) {
        // check if the ith bit is set or not
        if ((num & (1 << i)) !== 0) {
          // search for 1 in every number
          sub.push(s[i]);
        }
      }
      ans.push(sub);
    }
    ans.sort();
    return ans;
  }

  let s = [1,2,3];// return 2^size subsets
  let final_ans=allPossibleStrings(s);
  console.log(final_ans)

  ==================================================================================================================================================================================