You have a 32-bit unsigned integer called 'num' and another integer called 'i'.
You need to perform the following operations on the 'num' integer based on the value of 'i':

1. Get the bit value at the "i"th position of "num".

2. Set the bit at the "i"th position of "num".

3. Clear the bit at the "i"th position of "num".

We are starting bits from 1 instead of 0. (1-based)

For Example:
N=25  i=3
Output : 0 29 25

Bit at the 3rd position from LSB is 0. (1 1 0 0 1)

The value of the given number after setting the 3rd bit is 29. (1 1 1 0 1)

The value of the given number after clearing the 3rd bit is 25. (1 1 0 0 1)
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
9 3
Sample Output 1:
0 13 9
Explanation Of Sample Input 1:
Bit at the 3rd position from LSB is 0. ( 1 0 0 1)

The value of the given number after setting the 3rd bit is 13. ( 1 1 0 1)

The value of the given number after clearing the 3rd bit is 9. (1 0 0 1)
Sample Input 2:
11 2
Sample Output 2:
1 11 9
Explanation Of Sample Input 2:
The 2nd position from LSB is 1. (1 0 1 1)

The value of the given number after setting the 2nd bit is 11. (1 0 1 1)

The value of the given number after clearing the 2nd bit is 9. (1 0 0 1)


///======================================================================================================================================================================================

function bitManipulation(num, i) {
  // Create an array to store the results of the bit manipulation.
  let ans = new Array(3);
  //   let binaryrep=num.toString(2);
  //   console.log(binaryrep)//11001
  // Initialize variables to store the results of the get, set, and clear operations.
  let get = 0,
    set = 0,
    clear = 0;

  // Create a mask with a 1 in the 'i'th position (or) i-1 th bit and 0s in all other positions.
  let mask = 1 << (i - 1);
  // console.log(mask)

  //console.log(mask.toString(2))
  //console.log(~mask.toString(2))
  // Check if the 'i'th bit in 'num' is set (i.e., equals 1) by using the bitwise AND operator with the mask.
  if ((num & mask) !== 0) {
    // checking
    get = 1;
  }
  //console.log(num & mask)//11001 & 00100= 00000
  // Set the 'i'th bit in 'num' by using the bitwise OR operator with the mask.
  set = num | mask; // addition
  //console.log(set.toString(2))
  // Clear the 'i'th bit in 'num' by using the bitwise AND operator with the complement of the mask.
  clear = num & ~mask; // deletion//11001 & 11011=25

  // Push the results of the 'get', 'set', and 'clear' operations to the array.
  ans[0] = get;
  ans[1] = set;
  ans[2] = clear;

  // Return the array containing the results.
  return ans;
}

// Example usage:
let result = bitManipulation(9, 3);
console.log(result);
