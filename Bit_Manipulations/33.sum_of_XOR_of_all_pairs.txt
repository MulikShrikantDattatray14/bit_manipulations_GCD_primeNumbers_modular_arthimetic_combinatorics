brute force : iterate all pairs and get XOR sum.

let sum=0;
for(let i=0;i<N;i++){
    for(let j=0;j<N;j++){
        sum=sum+(ar[i]^ar[j])
    }
}
console.log(sum)

================================================================================================================================================================================================================================


Optimial solution : dont make pairs , instead count zeros and ones  and multiply both .
let ar = [3, 5, 6, 8, 2]; //148
let N = ar.length;
let sum = 0;
for (let i = 0; i < 32; i++) {
  // ith bit position-contribution=(2^i)*Ci
  let count = 0;
  for (let j = 0; j < N; j++) {
    if (((ar[j] >> i) & 1) == 1) count++;
  }
  sum = sum +(( count * (N - count)) * (1 << i));
}
let ans = 2 * sum;
console.log(ans);


==================================================================================================================================================================
// similiar question : 1835. Find XOR Sum of All Pairs Bitwise AND

https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/description/


//
//Certainly! The code uses bitwise operations to calculate the XOR sum of the result of bitwise AND operation between elements of two arrays, arr1 and arr2.

//Here's a brief explanation of the logic:

//The getXORSum function iterates through each bit position from the most significant bit (MSB) to the least significant bit (LSB).

//For each bit position, it calculates the count of set bits (1s) in that position for both arrays (arr1 and arr2) using the helper function countSetBits.

//If the count of set bits is odd for both arrays at the current bit position, it means there is an odd number of 1s in the AND result, and the XOR sum should have a set bit at that position.

//The result variable is updated using bitwise OR (|) to set the corresponding bit in the result if the condition in step 3 is met.

//The final result is the XOR sum of the AND results for all bit positions.

//The helper function countSetBits is used to count the number of set bits at a specific bit position in the binary representation of the numbers in an array.

//This approach leverages the properties of XOR and bitwise AND operations to efficiently calculate the desired result.

function getXORSum(arr1, arr2) {
  let result = 0;

  for (let i = 30; i >= 0; i--) {
    let mask = 1 << i;

    let count1 = countSetBits(arr1, mask);
    let count2 = countSetBits(arr2, mask);
   
    if (count1 % 2 === 1 && count2 % 2 === 1) {
      result |= mask;
    }
  }

  return result;
}

function countSetBits(arr, mask) {
  let count = 0;
  for (let num of arr) {
    if ((num & mask) !== 0) {
      count++;
    }
  }
  return count;
}

// Example usage:
const arr1 = [1, 2, 3];
const arr2 = [6, 5];//0

// const arr1 = [12];
// const arr2 = [4]; //4

const output = getXORSum(arr1, arr2);
console.log(output); // Output: 0




