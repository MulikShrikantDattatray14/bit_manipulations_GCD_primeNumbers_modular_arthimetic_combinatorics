Problem statement :

You are given two numbers 'L' and 'R'.
Find the XOR of the elements in the range [L, R].
//https://www.youtube.com/watch?v=pH7E4Ny7EnU
For Example:
For 'L' = 1 and ‘R’ = 5.
The answer is 1.
///////////////////////////////////////////////////////////////////////////////
Sample Input 1:
3 5
Sample Output 1:
2
Explanation of sample output 1:
'L' = 3 and ‘R’ = 5
Answer is 2. Value of 3^4^5 is 2.
////////////////////////////////////////////////////////////////////////
Sample Input 2:
1 3
Sample Output 2:
0

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Let's consider the XOR sequence of consecutive numbers from 0 to n:

0, 1, 3, 0, 4, 1, 7, 0, 8, 1, 11, 0, 12, 1, 15, 0, 16, 1, 19, 0, ...

We can observe that the sequence repeats itself every 4 numbers. Specifically, for every non-negative integer ‘k’, we have:

XOR(4k, 4k+1, 4k+2, 4k+3) 
= XOR(0, 1, 2, 3) ^ (4k ^ 4k+1 ^ 4k+2 ^ 4k+3)
= 0 ^ (4k+3 ^ 4k+1) = 4k+2
 

Using this observation, we can derive the given formula for computing the XOR of a range of numbers from ‘L’ to ‘R’. Specifically, let ‘x’ = xor1toN(‘L’-1) and ‘y’ = xor1toN(‘R’), where xor1toN(num) returns the XOR of all numbers from 0 to ‘num’. Then, we can express the XOR of the range from ‘L’ to ‘R’ as:
 

XOR(L, R) = XOR(0, 1, 2, ...,L-1) ^ XOR(0, 1, 2, ..., R)

= XOR(0, 1, 2, ..., L-1) ^ (XOR(0, 1, 2, ..., L-1) ^ XOR(L, L+1, ..., R))

= XOR(L, L+1, ..., R)

= x ^ y

 //=============================================================================================================================================================================================================================


 //Approach-1 :  Brute force
let L = 1 ;
let R = 5;
let ans=L;
for(let i=L+1;i<=R;i++){
    ans=ans^i;
}
//console.log(ans)

//////////////////////////////////////////////////////////////////////////////
// Approach-2 : using bit manipulation
/*
    Time Complexity: O(1)

    Space Complexity: O(1)

*/
// /https://www.youtube.com/watch?v=pH7E4Ny7EnU
// Function to compute xor of number 1 to 'N'.
function xor1toN(N) {
    if (N % 4 === 0)
        return N;
    if (N % 4 === 1)
        return 1;
    if (N % 4 === 2)
        return N + 1;
    if (N % 4 === 3)
        return 0;
    return -1;
}

// Function to compute xor of number 'L' to 'R'.
function findXOR(L, R) {
    // Compute xor of 1 to L-1.
    const x = xor1toN(L - 1);

    // Compute xor of 1 to R.
    const y = xor1toN(R);
    return x ^ y;
}

// Example usage:
const result = findXOR(3, 5);
console.log(result);


//======================================================================================================================================================================================