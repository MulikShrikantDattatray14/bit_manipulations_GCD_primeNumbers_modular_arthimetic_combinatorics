Problem Description :

You are given two integers A and B.
Return 1 if B-th bit in A is set
Return 0 if B-th bit in A is unset
Note:
The bit position is 0-indexed, which means that the least significant bit (LSB) has index 0.

=================================================================================
// way-1 : using the right shift
	solve : function(A, B){
		return (A>>B)&1==1;


	}

=================================================================================

// way -2 : using the left shift

/*
    Time complexity: O(1)
    Space complexity: O(1)
*/

function isKthBitSet(n, k) {
    // Bitwise and of 2 bits is true if both bits are true else it is false.
    // So we can check the bitwise and of n and 2^(k-1).
    let mask=(1 << (k - 1))
    return (n & mask ) !== 0;
}
let n=3;// number
let k=3;// th-bit
let ans= isKthBitSet(n, k)
console.log(ans)
